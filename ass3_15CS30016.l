%{
#include "ass3_15CS30016.h"
%}

UNSIGNED	"unsigned"
BREAK		"break"
RETURN		"return"
VOID		"void"
FLOAT		"float"
SHORT		"short"
CHAR		"char"
FOR		"for"
SIGNED		"signed"
WHILE		"while"
GOTO		"goto"
BOOL		"Bool"
CONTINUE	"continue"
IF		"if"
DEFAULT		"default"
DO		"do"
INT		"int"
SWITCH		"switch"
DOUBLE		"double"
LONG		"long"
ELSE		"else"
MATRIX		"Matrix"
IDENTIFIER	[_a-zA-Z][_a-zA-Z0-9]*
DIGIT		[0-9]
NONZERO_DIGIT	[1-9]
INTEGER_CONSTANT	[1-9][0-9]*
DIGIT_SEQUENCE	[0-9]*
FRACTIONAL_CONSTANT	(({DIGIT_SEQUENCE})?\.{DIGIT_SEQUENCE})|({DIGIT_SEQUENCE}\.)
SIGN		[+-]
EXPONENT_PART	[Ee]({SIGN})?{DIGIT_SEQUENCE}
FLOATING_CONSTANT	({FRACTIONAL_CONSTANT}({EXPONENT_PART})?)|({DIGIT_SEQUENCE}{EXPONENT_PART})
ESCAPE_SEQUENCE	[\\'\\"\\?\\\\\a\\b\\f\\n\\r\\t\\v]
C_CHAR		([^\'\\\n])* | {ESCAPE_SEQUENCE}
C_CHAR_SEQUENCE	{C_CHAR}+
CHARACTER_CONSTANT	"\'"{C_CHAR_SEQUENCE}"\'"
STRING_LITERAL	"\""{C_CHAR_SEQUENCE}*"\""
LEFT_SQUARE_BRAC_PUNC	"["
RIGHT_SQUARE_BRAC_PUNC	"]"
LEFT_SMALL_BRAC_PUNC	"("
RIGHT_SMALL_BRAC_PUNC	")"
LEFT_CURL_BRAC_PUNC	"{"
RIGHT_CURL_BRAC_PUNC	"}"
DOT_PUNC		"."
ARROW_PUNC		"->"
PLUS_PLUS_PUNC		"++"
MINUS_MINUS_PUNC	"--"
BIT_AND_PUNC		"&"
MULT_PUNC		"*"
PLUS_PUNC		"+"
MINUS_PUNC		"-"
NEGATION_PUNC		"~"
NOT_PUNC		"!"
DIVIDE_PUNC		"/"
MOD_PUNC		"%"
LEFT_SHIFT_PUNC		"<<"
RIGHT_SHIFT_PUNC	">>"
LESS_THAN_PUNC		"<"
GREATER_THAN_PUNC	">"
LESS_EQUAL_PUNC		"<="
GREATER_EQUAL_PUNC	">="
EQUAL_EQUAL_PUNC	"=="
NOT_EQUAL_PUNC		"!="
XOR_PUNC		"^"
BIT_OR_PUNC		"|"
AND_PUNC		"&&"
OR_PUNC			"||"
QUESTION_MARK_PUNC	"?"
COLON_PUNC		":"
SEMICOLON_PUNC		";"
EQUAL_PUNC		"="
MULT_EQUAL_PUNC		"*="
DIVIDE_EQUAL_PUNC	"/="
MOD_EQUAL_PUNC		"%="
PLUS_EQUAL_PUNC		"+="
MINUS_EQUAL_PUNC	"-="
LEFT_SHIFT_EQUAL_PUNC	"<<="
RIGHT_SHIFT_EQUAL_PUNC	">>="
BIT_AND_EQUAL_PUNC	"&="
XOR_EQUAL_PUNC		"^="
BIT_OR_EQUAL_PUNC		"|="
COMMA_PUNC		","
HASHTAGE_PUNC		"#"
SINGLE_LINE_COMMENT	"//"[^\r\n]*[\r\n]
WHITESPACE			[ \t\n]

%%

{FLOATING_CONSTANT}			{ return FLOATING_CONSTANT; }
{LEFT_SQUARE_BRAC_PUNC}			{ return LEFT_SQUARE_BRAC_PUNC; }
{RIGHT_SQUARE_BRAC_PUNC}		{ return RIGHT_SQUARE_BRAC_PUNC; }
{LEFT_SMALL_BRAC_PUNC}			{ return LEFT_SMALL_BRAC_PUNC; }
{RIGHT_SMALL_BRAC_PUNC}			{ return RIGHT_SMALL_BRAC_PUNC; }
{LEFT_CURL_BRAC_PUNC}			{ return LEFT_CURL_BRAC_PUNC; }
{RIGHT_CURL_BRAC_PUNC}			{ return RIGHT_CURL_BRAC_PUNC; }
{SINGLE_LINE_COMMENT}			{ return SINGLELINE_COMMENT; }
{WHITESPACE}					{ /* Ignore whitespace */ }
.					{ return 0; }

%%

main(int argc, int* argv) {
	int token;
	while (token = yylex()) {
		printf("%d\n", token);
	}
}

