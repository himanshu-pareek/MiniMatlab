type-specifier ==> void
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
identifier-list-opt ==> EMPTY-STRING
direct-declarator ==> direct-declarator ( identifier-list-opt )
declarator ==> pointer-opt direct-declarator
declaration-list-opt ==> EMPTY_STRING
type-specifier ==> unsigned
type-specifier ==> int
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
declaration-specifiers-opt ==> declaration-specifiers
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item
type-specifier ==> signed
type-specifier ==> int
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
declaration-specifiers-opt ==> declaration-specifiers
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
init-declarator ==> ceclarator
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> Bool
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> char
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
pointer ==> * pointer-opt
pointer-opt ==> pointer
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> CHARACTER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> char
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
pointer ==> * pointer-opt
pointer-opt ==> pointer
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
primary-expression ==> string-literal
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
constant-expression ==> conditional-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
labeled-statement ==> case constant-expression : statement
statement ==> labeled-statement
block-item ==> statement
block-item-list ==> block-item
jump-statement ==> break ;
stetement ==> jump-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
constant-expression ==> conditional-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
labeled-statement ==> case constant-expression : statement
statement ==> labeled-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
jump-statement ==> break ;
stetement ==> jump-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
constant-expression ==> conditional-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
labeled-statement ==> case constant-expression : statement
statement ==> labeled-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
jump-statement ==> break ;
stetement ==> jump-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
labeled-statement ==> default : statementstatement ==> labeled-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
block-item-list-opt ==> block-item-list
compound-statement ==> { block-item-list-opt }
stetement ==> compound-statement
selection-statement ==> switch ( expression ) statement
stetement ==> selection-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
type-specifier ==> float
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> FLOATING_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> float
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
unary-operator ==> -
constant ==> FLOATING_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
unary-operator cast-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> short
type-specifier ==> int
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
declaration-specifiers-opt ==> declaration-specifiers
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
type-specifier ==> char
declaration-specifiers-opt ==> EMPTY_STRING
declaration-specifiers ==> type-specifier declaration-specifiers-opt
pointer-opt ==> EMPTY_STRING
direct-declarator ==> identifier
declarator ==> pointer-opt direct-declarator
constant ==> CHARACTER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
initializer ==> assignment-expression
init-declarator ==> declarator = initializer
init-declarator-list ==> init-declarator
init-declarator-list-opt ==> init-declarator-list
declaration ==> declaration-specifiers init-declarator-list-opt
block-item ==> declaration
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
relational-expression ==> relational-expression < shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
primary-expression ==> ( expression )
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> equality-expression != relational-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
primary-expression ==> ( expression )
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> logical-AND-expression && inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
expression-opt ==> expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
unary-expression ==> ++ unary-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
expression-opt ==> expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
postfix-expression ==> postfix-expression [ expression ]
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
relational-expression ==> relational-expression >= shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
jump-statement ==> continue ;
stetement ==> jump-statement
jump-statement ==> break ;
stetement ==> jump-statement
selection-statement ==> if ( expression) statement else statement
stetement ==> selection-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
block-item-list-opt ==> block-item-list
compound-statement ==> { block-item-list-opt }
stetement ==> compound-statement
iteration-statement ==> for ( expression-opt ; expression-opt ; expression-opt ) statement
stetement ==> iteration-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
expression-opt ==> EMPTY_STRING
expression-opt ==> EMPTY_STRING
expression-opt ==> EMPTY_STRING
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item
block-item-list-opt ==> block-item-list
compound-statement ==> { block-item-list-opt }
stetement ==> compound-statement
iteration-statement ==> for ( expression-opt ; expression-opt ; expression-opt ) statement
stetement ==> iteration-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> equality-expression == relational-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> multiplicative-expression MOD cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
relational-expression ==> relational-expression >= shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> %=
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
selection-statement ==> if ( expression ) statement
stetement ==> selection-statement
selection-statement ==> if ( expression) statement else statement
stetement ==> selection-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> additive-expression - multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
postfix-expression ==> postfix-expression ++
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
postfix-expression ==> postfix-expression --
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> +=
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
postfix-expression ==> postfix-expression --
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
block-item-list-opt ==> block-item-list
compound-statement ==> { block-item-list-opt }
stetement ==> compound-statement
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> equality-expression != relational-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> equality-expression != relational-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
primary-expression ==> ( expression )
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression || logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
expression ==> assignment-expression
iteration-statement ==> do statement while ( expression ) ;
stetement ==> iteration-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> additive-expression + multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> multiplicative-expression * cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> multiplicative-expression / cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> multiplicative-expression / cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> -=
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> /=
constant ==> INTEGER_CONSTANT
primary-expression ==> constant
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> exclusive-OR-expresssion ^ AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> =
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> inclusive-OR-expression | exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> ^=
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> |=
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
assignment-operator ==> &=
primary-expression ==> identifier
postfix-expression ==> primary-expression
unary-expression ==> postfix-expression
cast-expression ==> unary-expression
multiplicative-expression ==> cast-expression
additive-expression ==> multiplicative-expression
shift-expression ==> additive-expression
ralational-expression ==> shift-expression
equality-expression ==> relartional-expression
AND-expression ==> equality-expression
exclusive-OR-expression ==> AND-expression
inclusive-OR-expression ==> exclusive-OR-expression
logical-AND-expression ==> inclusive-OR-expression
logical-OR-expression ==> logical-AND-expression
conditional-expression ==> logical-OR-expression
assignment-expression ==> conditional-expression
assignment-expression ==> unary-expression assignment-operator assignment-expression
expression ==> assignment-expression
expression-opt ==> expression
expression-statement ==> expression-opt ;
stetement ==> expression-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
expression-opt ==> EMPTY_STRING
jump-statement ==> return expression-opt ;	
stetement ==> jump-statement
block-item ==> statement
block-item-list ==> block-item-list block-item
block-item-list-opt ==> block-item-list
compound-statement ==> { block-item-list-opt }
function-declaration ==> declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration ==> function-declaration
translation-unit ==> external-declaration
